<!-- vi:filetype=html -->
<html>
    <head>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
        <script type="text/javascript" src="/static/qrcode.min.js"></script>
        <title>Status Node</title>
    </head>
    <body>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="#">Status Node</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <span class="navbar-text">Services:</span>
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="#"> &#x2611; Bootnode</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="#">&#x2611; Mailserver <span class="sr-only">(current)</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">&#x2612; ETH RPC</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">&#x2612; IPFS Gateway</a>
                    </li>
                </ul>
                <a class="nav-link" href="#">Logs</a>
            </div>
        </nav>
        <script type="text/javascript">
            function apply_config_override(conf) {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", "/set", true);
                xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');

                xhr.send(JSON.stringify(conf));

                xhr.onloadend = function () {
                    location.reload();
                };
            }

            function set_mailserver(enable) {
                // construct an HTTP request
                var data = {
                    "WhisperConfig": {
                        "EnableMailServer": enable
                    }
                };
                apply_config_override(data);
            }

            function update_max_peers() {
                var maxPeers = document.getElementById('max-peers').value;

                var data = {
                    "MaxPeers": Number(maxPeers)
                };

                apply_config_override(data);
            }

            function update_my_ip() {
                var myIP = document.getElementById('my-ip').value;

                var data = {
                    "AdvertiseAddr": myIP
                };

                apply_config_override(data);
            }
    
            function add_static_peer() {
                var newStaticPeer = document.getElementById('new-static-peer').value;

                var staticPeersSearchResults = document.getElementById('static-peers').getElementsByTagName('span');

                var staticPeersList = [];

                for (var i = 0; i < staticPeersSearchResults.length; i++) {
                    staticPeersList.push(staticPeersSearchResults[i].textContent);
                }

                staticPeersList.push(newStaticPeer);

                var data = {
                    "ClusterConfig": {
                        "StaticNodes": staticPeersList
                    }
                };

                apply_config_override(data);
            }

            function reset_config() {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", "/reset", true);
                xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');

                xhr.send("");

                xhr.onloadend = function () {
                    location.reload();
                };
            }

        </script>
        <div class="container" id="content-mailserver">
            <h1>Mailserver</h1>
            {{ if .Enabled }}
                <button onclick="set_mailserver(false);">Stop Mailserver</button>
                <button onclick="reset_config()">Reset Config</button>
            {{ else }}
                <button onclick="set_mailserver(true)">Start Mailserver</button>
            {{ end }}
            <div class="row">
                <div class="col-6">
                    <div class="card" style="width: 20rem;">
                        <div class="card-body">
                            <h3>Info</h3>

                            <div id="qrcode"></div>
                            <script type="text/javascript">
                                new QRCode(document.getElementById("qrcode"), "{{ .EnodeID }}");
                            </script>
                            <p>
                            <code id="self-address">{{ .EnodeID }}</code>
                            </p>
                            <a href="#">How connect Status to this mailserver?</a>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <h3>Settings</h3>
                    <h5>Known Mailservers</h5>
                    <div id="peers">
                        <ul id="static-peers">
                             {{range .StaticPeers }}
                             <li><span>{{ . }}</span><button>Remove</button></li>
                             {{end}}
                        </ul>
                        <input id="new-static-peer" type="text" class="text" value="" name="new-static-peer"></input>
                        <button onclick="add_static_peer()">Add...</button>
                    </div>
                    <hr />
                    <h5>Max Peers</h5>
                    <input id="max-peers" type="text" class="text" value="{{ .MaxPeers }}" name="max-peers"></input>
                    <button onclick="update_max_peers()">Set</button>
                    <h5>My IP</h5>
                    <input id="my-ip" type="text" class="text" value="{{ .MyIP }}" name="my-ip"></input>
                    <button onclick="update_my_ip()">Update</button>

                </div>
            </div>
        </div>
    </body>
</html>
